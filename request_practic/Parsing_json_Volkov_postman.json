{
	"info": {
		"_postman_id": "b02be3c7-d234-4269-8ebc-e75f2e5faa69",
		"name": "HW_Parsing_Volkov_gr29",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "19780035"
	},
	"item": [
		{
			"name": "right_string",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"/*  http://162.55.220.72:5005/first\r",
							"1. Отправить запрос.\r",
							"2. Статус код 200\r",
							"3. Проверить, что в body приходит правильный string. */\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200); // Проверяем, что в ответе у нас статус код 200\r",
							"});\r",
							"\r",
							"pm.test(\"Test_body_is_string\", function () {\r",
							"   pm.response.to.have.body(\"This is the first responce from server!ss\"); // Проверяем, что тело ответа у нас имеет строку \"This is the first responce from server!ss\"\r",
							"\r",
							"/*pm.test(\"Test_body_is_string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!ss\"); // Проверяем, что текс ответа у нас включает \"This is the first responce from server!ss\" */\r",
							"}); "
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://162.55.220.72:5007/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5007",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Проверка Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"}); \r",
							"\r",
							"//Спарсить response(ответ) body в json\r",
							"let jsonData = pm.response.json()\r",
							"\r",
							"//Проверить, что name в ответе равно name s request\r",
							"pm.test(\"check_name\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(\"Alex\")\r",
							"});\r",
							"\r",
							"//Проверить, что age в ответе равно age s request\r",
							"pm.test(\"check_age\", function () {\r",
							"    pm.expect(jsonData.age).to.eql('30')\r",
							"});\r",
							"\r",
							"// Проверить, что salary в ответе равно salary s request \r",
							"pm.test(\"check_salary\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(15000)\r",
							"});\r",
							"\r",
							"//Спарсить request (запрос)\r",
							"let req = request.data\r",
							"\r",
							"\r",
							"//Проверить, что name в ответе (response) равно name s request (name забрать из request.)\r",
							"pm.test(\"check_name_response\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(\"Alex\")\r",
							"});\r",
							"\r",
							"//Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"check_age_response\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(\"30\")\r",
							"});\r",
							"\r",
							"//Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"check_salary_response\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(15000)\r",
							"});\r",
							"\r",
							"//Вывести в консоль параметр family из request\r",
							"console.log(jsonData.family)\r",
							"\r",
							"//Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test(\"check_u_salary_1_5_year_response\", function () {\r",
							"    pm.expect(jsonData.family.u_salary_1_5_year).to.eql(jsonData.salary * 4)\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Alex",
							"type": "text"
						},
						{
							"key": "age",
							"value": "30",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "15000",
							"type": "text"
						},
						{
							"key": "",
							"value": "",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Спарсить response body в json.\r",
							"let jsonData = pm.response.json()\r",
							"\r",
							"//Спарсить request.\r",
							"let req = pm.request.url.query.toObject();\r",
							"\r",
							"//Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"check_name\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(req.name)\r",
							"});\r",
							"\r",
							"//Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"check_age\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(req.age) // to.eql, что в ответе(response) равно что в запросе(request)\r",
							"});\r",
							"\r",
							"//Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"check_salary\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(+req.salary) // +req чтобы ппреобразовать string в число, либо  JSON.stringify, чтобы преобразовать тело json в строку\r",
							"});\r",
							"\r",
							"//Вывести в консоль параметр family из response\r",
							"console.log(jsonData.family)\r",
							"\r",
							"//Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"check_dog_have_name\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog).to.have.property('name')\r",
							"});\r",
							"\r",
							"//Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"check_dog_have_age\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog).to.have.property('age') // to.have.property что у параметра есть параметр\r",
							"});\r",
							"\r",
							"//Проверить, что параметр name имеет значение Luky\r",
							"pm.test(\"check_dog_have_name_Luky\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog.name).to.be.oneOf([\"Luky\"]) // to.be.oneOf параметр имеет значение\r",
							"});\r",
							"\r",
							"//Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"check_dog_have_age_4\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog.age).to.be.oneOf([4]) // to.be.oneOf параметр имеет значение\r",
							"});\r",
							"\r",
							"//console.log(jsonData)\r",
							"//console.log(req)\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Alex&age=30&salary=15000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Alex"
						},
						{
							"key": "age",
							"value": "30"
						},
						{
							"key": "salary",
							"value": "15000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// татус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Спарсить response body в json.\r",
							"let jsonData = pm.response.json()\r",
							"\r",
							"// Спарсить request.\r",
							"let req = pm.request.url.query.toObject();\r",
							"\r",
							"// Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"check_name\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(req.name)\r",
							"});\r",
							"\r",
							"// Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"check_name\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(+req.age) //+req чтобы ппреобразовать string в число\r",
							"});\r",
							"\r",
							"// Вывести в консоль параметр salary из request.\r",
							"console.log(req.salary)\r",
							"\r",
							"//  Вывести в консоль параметр salary из response\r",
							"console.log(jsonData.salary)\r",
							"\r",
							"// Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(jsonData.salary[0])\r",
							"\r",
							"// Вывести в консоль 1-й элемент параметра salary из response.\r",
							"console.log(jsonData.salary[1])\r",
							"\r",
							"// Вывести в консоль 2-й элемент параметра salary из response.\r",
							"console.log(jsonData.salary[2])\r",
							"\r",
							"// Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"check_param_[0]_salary\", function () {\r",
							"    pm.expect(jsonData.salary[0]).to.eql(+req.salary) // to.eql, что в ответе(response) равно что в запросе(request). +req преобразовать в число\r",
							"});\r",
							"\r",
							"// Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"check_param_[1]_salary\", function () {\r",
							"    pm.expect(+jsonData.salary[1]).to.eql(req.salary * 2) // to.eql, что в ответе(response) равно что в запросе(request). +jsonData преобразовать в число\r",
							"});\r",
							"\r",
							"// Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"check_param_[2]_salary\", function () {\r",
							"    pm.expect(+jsonData.salary[2]).to.eql(req.salary * 3) // to.eql, что в ответе(response) равно что в запросе(request). +jsonData преобразовать в число\r",
							"});\r",
							"\r",
							"// Передать в окружение переменную name\r",
							"pm.environment.set(\"name\", jsonData.name);\r",
							"\r",
							"//  Передать в окружение переменную age\r",
							"pm.environment.set(\"age\", jsonData.age);\r",
							"\r",
							"// Передать в окружение переменную salary\r",
							"pm.environment.set(\"salary\", jsonData.salary[0]);\r",
							"\r",
							"// Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"for (i = 0; i < jsonData.salary.length; i++){   // пока i меньше длины массива выводим в консоль по порядку элемнты массива salary из jsonData\r",
							"console.log(\"salary_cycle\", jsonData.salary[i]) //for (i = 0; i < jsonData.salary.length; i++)\r",
							"}\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Alex&age=30&salary=15000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Alex"
						},
						{
							"key": "age",
							"value": "30"
						},
						{
							"key": "salary",
							"value": "15000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Вставляем в POST запрос URL: http://162.55.220.72:5005/user_info_2\r",
							"// в Body --> Form data значения параметров name, age, salary из окружения HW_postman\r",
							"\r",
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//  Спарсить response body в json.\r",
							"let jsonData = pm.response.json()\r",
							"\r",
							"// Спарсить request.\r",
							"let req = request.data\r",
							"\r",
							"// Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"check_json_have_start_qa_salary\", function () {\r",
							"    pm.expect(jsonData).to.have.property('start_qa_salary') // to.have.property - есть параметр\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"check_json_have_qa_salary_after_6_months\", function () {\r",
							"    pm.expect(jsonData).to.have.property('qa_salary_after_6_months') // to.have.property - есть параметр\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"check_json_have_qa_salary_after_12_months\", function () {\r",
							"    pm.expect(jsonData).to.have.property('qa_salary_after_12_months') // to.have.property - есть параметр\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"check_json_have_qa_salary_after_1.5_year\", function () {\r",
							"    pm.expect(jsonData).to.have.property('qa_salary_after_1.5_year') // to.have.property - есть параметр\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"check_json_have_qa_salary_after_3.5_years\", function () {\r",
							"    pm.expect(jsonData).to.have.property('qa_salary_after_3.5_years') // to.have.property - есть параметр\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр person\r",
							"pm.test(\"check_json_have_person\", function () {\r",
							"    pm.expect(jsonData).to.have.property('person') // to.have.property - есть параметр\r",
							"});\r",
							"\r",
							"// Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"start_qa_salary\", function () {\r",
							"    pm.expect(jsonData.start_qa_salary).to.eql(+req.salary) // +req чтобы ппреобразовать string в число, либо  JSON.stringify, чтобы преобразовать тело json в строку\r",
							"});\r",
							"\r",
							"// Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_6_months\", function () {\r",
							"    pm.expect(jsonData.qa_salary_after_6_months).to.eql(+req.salary * 2)\r",
							"});\r",
							"\r",
							"// Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_12_months\", function () {\r",
							"    pm.expect(jsonData.qa_salary_after_12_months).to.eql(+req.salary * 2.7)\r",
							"});\r",
							"\r",
							"// Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_1.5_year\", function () {\r",
							"    pm.expect(jsonData[\"qa_salary_after_1.5_year\"]).to.eql(req.salary* 3.3) // занчения массивов обязательно в \"\"\r",
							"});\r",
							"\r",
							"// Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_3.5_years\", function () {\r",
							"    pm.expect(jsonData[\"qa_salary_after_3.5_years\"]).to.eql(req.salary* 3.8) // занчения массивов обязательно в \"\"\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр person\r",
							"pm.test(\"json_response_have_param_person\", function () {\r",
							"    pm.expect(jsonData).to.have.property('person')\r",
							"});\r",
							"\r",
							"// Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"start_qa_salary=req_salary\", function () {\r",
							"    pm.expect(jsonData.start_qa_salary).to.eql(+req.salary)\r",
							"});\r",
							"\r",
							"// Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_6_months=req_salary*2\", function () {\r",
							"    pm.expect(jsonData.qa_salary_after_6_months).to.eql(+req.salary * 2)\r",
							"});\r",
							"\r",
							"// Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_12_months=req_salary*2.7\", function () {\r",
							"    pm.expect(jsonData.qa_salary_after_12_months).to.eql(+req.salary * 2.7)\r",
							"});\r",
							"\r",
							"// Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_1.5_year=req_salary*3.3\", function () {\r",
							"    pm.expect(jsonData[\"qa_salary_after_1.5_year\"]).to.eql(+req.salary * 3.3)\r",
							"});\r",
							"\r",
							"// Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_3.5_years=req_salary*3.8\", function () {\r",
							"    pm.expect(jsonData[\"qa_salary_after_3.5_years\"]).to.eql(+req.salary * 3.8)\r",
							"});\r",
							"\r",
							"// Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"person[1]_from_name=req.salary\", function () {\r",
							"    pm.expect(jsonData.person.u_name[1]).to.eql(+req.salary)\r",
							"});\r",
							"\r",
							"// Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"u_age=req.age\", function () {\r",
							"    pm.expect(jsonData.person.u_age).to.eql(+req.age)\r",
							"});\r",
							"\r",
							"// Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"u_salary_5_years=req.salary*4.2\", function () {\r",
							"    pm.expect(jsonData.person.u_salary_5_years).to.eql(+req.salary * 4.2)\r",
							"});\r",
							"\r",
							"// ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person\r",
							"for (let i in jsonData.person){ // Для каждого i-го элемента из массива jsonData.person вывести в консоль\r",
							"console.log(\"cycle_param_person\", jsonData.person[i]);\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}